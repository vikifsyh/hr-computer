// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum CategoryEnum {
  LAPTOP
  SPAREPART
}


model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  password      String?
  address       String?
  image         String?
  role          Role      @default(USER)
  phoneNumber   String?   @unique
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Relasi dengan Order
  orders        Order[]

  negotiations  Negotiation[]
}

model Product {
  id              String    @id @default(cuid())
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt
  name            String?   @db.Text
  description     String?   @db.Text
  image           String?   @db.Text
  price           String?   @db.Text
  stock           Int?      @default(0)
  category        CategoryEnum
  // Relasi dengan OrderItem
  orderItems      OrderItem[]
  negotiations    Negotiation[]
}

model Order {
  id              String       @id @default(cuid())
  createdAt       DateTime     @default(now())
  updatedAt       DateTime     @updatedAt
  userId          String
  user            User         @relation(fields: [userId], references: [id])
  shippingStatus  String       @default("DIKEMAS")
  trackingNumber  String?
  paymentStatus   String
  totalPrice      Float        @default(0)

  //relasi dengan orderitem
  orderItems      OrderItem[]
}

model OrderItem {
  id              String     @id @default(cuid())
  createdAt       DateTime   @default(now())
  updatedAt       DateTime   @updatedAt
  orderId         String
  order           Order      @relation(fields: [orderId], references: [id])
  productId       String
  product         Product    @relation(fields: [productId], references: [id])
  quantity        Int        @default(1)
  price           Float
  isDeleted       Boolean @default(false)
}

model Negotiation {
  id          String   @id @default(cuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String
  product     Product  @relation(fields: [productId], references: [id])
  productId   String
  offerPrice  Float
  status      String   @default("PENDING") // ACCEPTED | REJECTED
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


